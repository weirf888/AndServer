apply plugin: 'maven'
apply plugin: 'signing'

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

group = POM_GROUP_ID
version = POM_VERSION

def toRemote = project.hasProperty('toRemote') ? Boolean.valueOf("${toRemote}") : false
println("publish to remote repositoryï¼š${toRemote}")

def plugins = project.getPlugins()

def getSonatypeUserName() {
    return hasProperty('SONATYPE_USERNAME') ? SONATYPE_USERNAME : ""
}

def getSonatypePassword() {
    return hasProperty('SONATYPE_PASSWORD') ? SONATYPE_PASSWORD : ""
}

if (plugins.hasPlugin('com.android.library')) {
    task install(type: Upload, dependsOn: assemble) {
        repositories.mavenInstaller {
            configurePom(pom)
        }
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.source
    }
} else if (plugins.hasPlugin('java-library') || plugins.hasPlugin('java-library')) {
    install {
        repositories.mavenInstaller {
            configurePom(pom)
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

project.afterEvaluate {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                if (toRemote) {
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: getSonatypeUserName(), password: getSonatypePassword())
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: getSonatypeUserName(), password: getSonatypePassword())
                    }
                } else {
                    repository(url: mavenLocal().getUrl())
                }

                configurePom(pom)
            }
        }
    }
}

def configurePom(pom) {
    pom.groupId = POM_GROUP_ID
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = POM_VERSION

    pom.project {
        name = POM_NAME
        packaging = POM_PACKAGING
        url = POM_URL
        description = POM_PACKAGING

        scm {
            url POM_URL
            connection POM_GIT_URL
            developerConnection POM_GIT_URL
        }

        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email = POM_DEVELOPER_EMAIL
            }
        }
    }
}